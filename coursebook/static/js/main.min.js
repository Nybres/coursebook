addEventListener('DOMContentLoaded', event => {
	let isEdit = false
	const alerts = document.querySelectorAll('.alert')
	if (alerts) {
		alerts.forEach(alert => {
			const deley = setTimeout(() => {
				alert.classList.add('alert__hide')
			}, 2000)
		})
	}

	const backdropActivate = overlay => {
		overlay.classList.add('overlay--active')
		document.body.classList.add('no-scroll')
	}

	const backdropDeActivate = overlay => {
		overlay.classList.remove('overlay--active')
		document.body.classList.remove('no-scroll')
	}

	const drawer = document.querySelector('.drawer')
	if (drawer) {
		const overlay = document.querySelector('.overlay')
		const accountAddBtn = document.querySelector('.jsAccountAdd')
		const drawerBackBtn = drawer.querySelector('.drawer__back')

		accountAddBtn.addEventListener('click', () => {
			drawer.classList.add('drawer--active')
			backdropActivate(overlay)
			if (instructorForm) {
				handleClearForm(instructorForm)
			} else {
				handleClearForm(courseForm)
			}
			isEdit = false
		})

		drawerBackBtn.addEventListener('click', () => {
			drawer.classList.remove('drawer--active')
			backdropDeActivate(overlay)
		})
	}

	const handleShadowNavigation = () => {
		if (window.scrollY > 148) {
			navigationElement.classList.add('nav--shadow')
		} else {
			navigationElement.classList.remove('nav--shadow')
		}
	}

	const navigationElement = document.querySelector('.nav')
	if (navigationElement) {
		window.addEventListener('scroll', handleShadowNavigation)
	}

	//
	const handleFillFromInputs = (form, data) => {
		Object.entries(data).forEach(([key, value]) => {
			let counter = 0
			const inputElement = form.querySelector(`[name='${key}']`)
			if (inputElement) {
				if (inputElement.tagName.toLowerCase() === 'select') {
					const niceSelect = inputElement.nextElementSibling
					const current = niceSelect.querySelector('.current')
					const listOptions = niceSelect.querySelectorAll('.option')
					const options = Array.from(inputElement.options)
					options.forEach((option, index) => {
						if (option.value == value) {
							listOptions[0].classList.remove('selected')
							listOptions[index].classList.add('selected')
							current.textContent = option.dataset.name
							option.selected = true
							// console.log(inputElement.selectedIndex)

							inputElement.addEventListener('change', e => {
								if (counter == 0) {
									console.log('object')
									listOptions[index].classList.remove('selected')
									counter++
								}
							})
						}
					})
				}
				inputElement.value = value
			} else {
				console.log(`Brak pola formularza o nazwie '${key}'`)
			}
		})
	}
	//

	//   tworzenie kursu
	///////////////////////////////////////////
	const courseForm = document.querySelector('.jsCourseForm')
	if (courseForm) {
		courseForm.addEventListener('submit', e => {
			e.preventDefault()
			const formData = new FormData(courseForm)
			const csrfToken = formData.get('csrfmiddlewaretoken')
			const fileInputs = courseForm.querySelectorAll('input[type="file"]')
			fileInputs.forEach(input => {
				const files = input.files
				for (let i = 0; i < files.length; i++) {
					const file = files[i]
					formData.append('uploaded_images', file)
				}
			})

			fetch(isEdit ? '/edit-course/' + courseId : '/account-courses', {
				method: isEdit ? 'PUT' : 'POST',
				headers: {
					'X-CSRFToken': csrfToken,
				},
				body: formData,
			})
				.then(response => {
					courseForm.reset()
					if (response.ok) {
						location.reload()
					} else {
						location.reload()
					}
				})
				.catch(error => {
					console.log(error)
				})

			// fetch('/account-courses', {
			// 	method: 'POST',
			// 	headers: {
			// 		'X-CSRFToken': csrfToken,
			// 	},
			// 	body: formData,
			// })
			// 	.then(response => {
			// 		console.log(response)
			// 		if (response.ok) {
			// 			location.reload()
			// 		} else {
			// 			location.reload()
			// 		}
			// 	})
			// 	.catch(error => {
			// 		console.log(error)
			// 	})
		})
	}

	const courseEditBtns = document.querySelectorAll('.jsCourseEdit')
	courseEditBtns.forEach(btn => {
		btn.addEventListener('click', e => {
			handleClearForm(courseForm)
			isEdit = true
			courseId = btn.dataset.id
			fetch('/edit-course/' + courseId, {
				method: 'GET',
			})
				.then(response => response.json())
				.then(data => {
					const overlay = document.querySelector('.overlay')
					backdropActivate(overlay)
					drawer.classList.add('drawer--active')
					handleFillFromInputs(courseForm, data)
					if (data.images) {
						const imageElements = document.querySelector('.form__images').querySelectorAll('.form__images-image')
						if (imageElements) {
							for (let i = 0; i < data.images.length; i++) {
								imageElements[i].remove()
							}
						}
						data.images.reverse().forEach(image => {
							handleCreatePhoto(image.image)
						})

						const deleteElements = document.querySelectorAll('.form__images-delete')
						deleteElements.forEach(el => {
							el.addEventListener('click', e => {
								const elementToDelete = e.target.closest('.form__images-image')
								elementToDelete.remove()
								handleCreateInputFile('image')
							})
						})
					}
				})
		})
	})

	// edycja instruktora
	//   //////////////////////////////
	const instructorForm = document.querySelector('.jsInstructorForm')
	const handleImageNameDisplay = params => {
		const formImages = document.querySelectorAll('.form__images-image')
		if (formImages) {
			formImages.forEach(image => {
				image.addEventListener('change', e => {
					const input = image.querySelector('input')
					const fileNameSpan = image.querySelector('span')
					if (input.files.length > 0) {
						fileNameSpan.textContent = `${input.files[0].name}`
					} else {
						fileNameSpan.textContent = 'Wybierz zdjęcie'
					}
				})
			})
		}
	}

	const handleClearForm = form => {
		form.reset()
		const formImages = form.querySelectorAll('.form__images-image')
		formImages.forEach(el => {
			if (el.tagName.toLowerCase() === 'div') {
				el.remove()
				handleCreateInputFile()
			}
		})
	}

	const handleCreatePhoto = imageUrl => {
		const imagesContainer = document.querySelector('.form__images')

		const imageContainer = document.createElement('div')
		const deleteElement = document.createElement('div')
		const imageElement = document.createElement('img')
		imageContainer.classList.add('form__images-image')
		deleteElement.classList.add('form__images-delete')
		deleteElement.innerHTML = `
				<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
				fill="none" stroke="white" stroke-width="2" stroke-linecap="round"
				stroke-linejoin="round" class="feather feather-x">
				<line x1="18" y1="6" x2="6" y2="18"></line>
				<line x1="6" y1="6" x2="18" y2="18"></line>
				</svg>
			`
		imageElement.width = 150
		imageElement.height = 150
		imageElement.loading = 'lazy'
		imageElement.src = imageUrl

		const photoChangeInput = document.createElement('input')
		photoChangeInput.type = 'hidden'
		photoChangeInput.name = 'photo_change'
		const paresdUrl = new URL(imageUrl)
		photoChangeInput.value = paresdUrl.pathname

		imagesContainer.insertBefore(imageContainer, imagesContainer.firstChild)
		imageContainer.appendChild(deleteElement)
		imageContainer.appendChild(imageElement)
		imageContainer.appendChild(photoChangeInput)
	}

	const handleCreateInputFile = type => {
		const imagesContainer = document.querySelector('.form__images')
		const imageContainer = document.createElement('label')
		const imagePlaceholder = document.createElement('span')
		const imageInput = document.createElement('input')
		imageContainer.classList.add('form__images-image')
		imagePlaceholder.textContent = 'Wybierz zdjęcie'
		imageInput.type = 'file'
		imageInput.name = type

		imagesContainer.appendChild(imageContainer)
		imageContainer.appendChild(imagePlaceholder)
		imageContainer.appendChild(imageInput)
		handleImageNameDisplay()
	}

	handleImageNameDisplay()

	const instructorEditBtns = document.querySelectorAll('.jsInstructorEdit')
	instructorEditBtns.forEach(btn => {
		btn.addEventListener('click', e => {
			handleClearForm(instructorForm)
			isEdit = true
			instructorId = btn.dataset.id
			fetch('/edit-instructor/' + instructorId, {
				method: 'GET',
			})
				.then(response => response.json())
				.then(data => {
					const overlay = document.querySelector('.overlay')
					backdropActivate(overlay)
					drawer.classList.add('drawer--active')
					instructorForm.querySelector("[name='first_name']").value = data.first_name
					instructorForm.querySelector("[name='last_name']").value = data.last_name
					instructorForm.querySelector("[name='description']").value = data.description
					if (data.photo) {
						const imageElements = document.querySelector('.form__images').querySelectorAll('.form__images-image')
						imageElements[0].remove()
						handleCreatePhoto(data.photo)

						const deleteElements = document.querySelectorAll('.form__images-delete')
						deleteElements.forEach(el => {
							el.addEventListener('click', e => {
								const elementToDelete = e.target.closest('.form__images-image')
								elementToDelete.remove()
								handleCreateInputFile('photo')
							})
						})
					}
				})
		})
	})

	if (instructorForm) {
		instructorForm.addEventListener('submit', e => {
			e.preventDefault()
			const formData = new FormData(instructorForm)
			const csrfToken = formData.get('csrfmiddlewaretoken')
			fetch(isEdit ? '/edit-instructor/' + instructorId : '/account-instructors', {
				method: isEdit ? 'PUT' : 'POST',
				headers: {
					'X-CSRFToken': csrfToken,
				},
				body: formData,
			})
				.then(response => {
					instructorForm.reset()
					if (response.ok) {
						location.reload()
					} else {
						location.reload()
					}
				})
				.catch(error => {
					console.log(error)
				})
		})
	}

	// THE END
})
